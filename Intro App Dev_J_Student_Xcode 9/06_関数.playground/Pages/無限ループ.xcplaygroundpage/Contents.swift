/*:
 ## 無限ループ

 プログラマが、関数から「その関数自身」を呼び出すというミスをすることがあります。関数を呼び出すと、その関数が自分自身を呼び出し、その関数が自分自身を呼び出し…。
 
 身の回りに古くからある例が、シャンプーの容器に書かれている「泡立てとすすぎを繰り返してください」という説明です。その指示がコードだったら、コンピュータは泡立て、すすぎ、泡立て、すすぎ、を延々と繰り返すことになります。いつまでたっても終わりません！
 
 これを「無限ループ」と呼びます。ほとんどの場合はメモリ不足になってクラッシュする（またはシャンプーがなくなる）ので、本当に無限に続くことはありません。
 */

func rowTheBoat() {
    print("Row, row, row your boat")
    print("Gently down the stream")
}

func merrilyDream() {
    print("Merrily, merrily, merrily, merrily")
    print("Life is but a dream")
}

func verseOne() {
    rowTheBoat()
    merrilyDream()
}

verseOne()

/*:
 - experiment:(実験):
 上のコードで`verseOne`関数を編集して`merrilyDream()`を呼び出した後に`versaOne()`を呼び出すようにし、無限ループを作ります。コンソールと結果サイドバーを見てください。行を削除してループを止めます。Playgroundが元に戻るまでにしばらく時間がかかるかもしれません。無限ループは大変な仕事なのです。
 
 次は、長いプログラムで行う作業が、関数を使うことでわかりやすくなることを見ていきます。 
 
 [前ヘ](@previous)  |  7／12ページ  |  [次は「複雑さを隠す」です。](@next)
*/
