/*:
 ## 1つの仕事
 
 何度も使う可能性のあるコードは、関数にまとめることができます。`let`を使って定数の名前を「宣言」したのと同じように、`func`を使って関数を宣言できます。
 
 関数には複数のコード行を含めることができるので、宣言は少し複雑になります。これは非常にシンプルな関数です。
*/
func rowTheBoat() {
    print("Row, row, row your boat")
    print("Gently down the stream")
}
/*:
 関数の「名前」は`rowTheBoat()`です。`()`については後で学びますが、ここでは、括弧が続く識別子は関数だと覚えておいてください。
 
 2つの中括弧の間のコード`{`...`}`を関数の「本文」と呼びます。
 
 これらのコード行は、ここまでのPlaygroundで見てきたものとは異なります。結果サイドバーにもコンソールにも何も表示されません。それは、関数の「宣言」は、その関数を実行すると何を行うのかを記述するだけだからです。 
 
 実際にコードを実行するには、関数を「呼び出す」必要があります。関数の名前をタイプすると、関数を呼び出せます。以下の行をコメント解除してください。
*/
// rowTheBoat()
/*:
 Playgroundで関数を呼び出した場合、サイドバーに結果が表示されます。`rowTheBoat`関数を呼び出すと、下のコンソール領域にもテキストが出力されます。

 - callout(演習): 
 コンソールに何かを出力する関数を書いて、新しい関数を呼び出してみましょう。上の例に注意してみると、すべての括弧`()`と中括弧`{}`がどこに進むかわかります。関数を何回も呼び出すとどうなるでしょうか？

*/







//: 次は、タスクの考え方とタスクを適切に分ける方法について学習します。
//:
//: [前ヘ](@previous)  |  4／12ページ  |  [次は「分解する」です。](@next)
