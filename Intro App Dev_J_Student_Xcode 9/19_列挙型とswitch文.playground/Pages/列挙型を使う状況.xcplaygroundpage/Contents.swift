/*:
 ## 列挙型を使う状況
 
 コードの中に関連した値を持つ限定されたグループがある場合は、常にenumの使用を検討するとよいかもしれません。
 
 値に制限がない場合や取りうる値の数が多い場合は、enumの使用は適切ではないでしょう。
 
 ちょっとしたスポーツゲームのアプリケーションを開発しているとします。構造体を使って、フィールドの各プレーヤーを表現します。各プレーヤーは以下のプロパティを持っています。
 
 - `name`
 - `skillLevel`
 - `team`
 - `position`
 
 `name`は`String`型になります。あまりにも多くの可能性があるので、ここではenumを使いません。
 
 このゲームでは、ポイントシステムを使ってユーザーのスキルアップを表現するので、`skillLevel`は`Int`になります。
 
 `team`はenumになります。フィールドには`.red`と`.blue`の2チームしかいません。
 
 `position`もenumになります。どのようなゲームにするかに応じて、`.quarterback`、`.seeker`、`.pitcher`などが考えられます。 
 
 - callout(演習): 
チームとポジションのオプションを表すenumを定義してください。構文を再確認する場合は、前のページを参照してください。
*/






//: 次のページでは、enumの比較について学習します。\
//: [前ヘ](@previous)  |  5／21ページ  |  [次は「列挙型を比較する」です。](@next)
