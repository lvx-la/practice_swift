/*:
 ## 関数の種類
 
 関数を記述する時、パラメータと戻り値の組み合わせは4とおり考えられます。ここでは、それぞれの関数をどのような場合に使うかについてまとめます。
 
**❌ パラメータ、 ❌ 戻り値**\
 `paintPicture()`

 パラメータを持たず、値を返さない関数を呼び出すということは、「何かをしてほしいけれど、それがどのように行われようが、その後どうなろうが特に気にしません」と言っているようなものです。
 
 アーティストに絵の制作を依頼する場合を考えてみてください。`paintPicture()`のような関数を使った場合、アーティストは好きなものを作り、完成した作品は自分の好きな場所にずっと飾るでしょう。それはよその町かもしれません。 
 
 このような関数を呼び出すことは、何かを決める手間が省ける一方、大きな信頼が必要です。関数自身は処理を行い、何の情報も返しませんが、後で何らかの影響が出たときにどうすることもできないかもしれません。
 
 BoogieBotダンスのムービーは、このタイプの関数の例です。関数名が、BoogieBotにどの動作をするか指示します。「処理」は動作そのものです。
 
**✅ パラメータ、 ❌ 戻り値**\
 `paintPicture(width: Int, height: Int, dominantColor: UIColor)`
 
 このような関数は、引数によって処理が変わりますが、何も返しません。
 
 アーティストに絵の制作を依頼する時、特定のサイズや特定の配色、または好きな風景を入れて制作するよう依頼できます。行われる処理をより具体的に管理できますが、絵の制作の主導権はアーティストにあり、アーティストの好きなように進みます。
 
 `hello(name:)`関数はこのタイプの関数です。ユーザーがnameを管理し、「処理」はコンソールに文字列を出力することです。
 
**❌ パラメータ、 ✅ 戻り値**\
 `paintPicture() -> Painting`

 このタイプの関数は、追加情報を必要とせずに値を返します。
 
 アーティストに何の入力パラメータも与えなければ、アーティストは完全に自分の構想で何かを制作します。作品が完成したら、アーティストは完成した絵を直接あなたに手渡します。あなたは、その絵を飾ることも、売ることも、描き加えることさえもできます。

 このコースでは、まだこの組み合わせの関数は出てきていません。このタイプの関数の例として、乱数を返す関数や現在の日時を返す関数があります。
 
**✅ パラメータ、 ✅ 戻り値**\
 `paintPicture(width: Int, height: Int, dominantColor: UIColor) -> Painting`

 このタイプの関数は、渡された情報に基づいて値を返します。ユーザーが入力したものをすべて受け取り、それを新しい出力値に変換します。
 
 アーティストに対してどのように絵を制作してほしいか情報を提供し、完成した作品をもらって好きなように使う場合に相当します。
 
 `spaceAvailableMessage(eachVideoDuration:, numberOfVideos:)`関数は、このタイプの関数です。
 
 >(注意):
コンソールに出力する、BoogieBotにダンスをさせるなど、戻り値に関係のない処理を関数で行う場合、その処理は「副次作用」と呼ばれます。関数に名前を付ける時、`leftArmUp()`のように、副次作用を名前に含めるとよいでしょう。関数が戻り値を持たない場合、すべての処理が副次作用とみなされます。
 
 次のページでは、関数によってタスクを理解しやすくする方法を学習します。
 
[前ヘ](@previous)  |  8／17ページ  |  [次は「構成要素」です。](@next)
*/
