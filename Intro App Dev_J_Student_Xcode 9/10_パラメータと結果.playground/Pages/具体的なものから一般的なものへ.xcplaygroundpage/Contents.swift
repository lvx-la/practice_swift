/*:
 ## 具体的なものから一般的なものへ
 
 関数を宣言して呼び出す方法を覚えていますか？簡単に復習しましょう。コンソールを開いて出力を確認します。
*/
func helloJohnny() {
    let name = "Johnny"
    print("Hello " + name)
}
helloJohnny()
/*:
 関数`helloJohnny()`は非常に「具体的」です。 Vikramに挨拶したい場合は、`helloVikram()`という関数を記述する必要があります。これではそのうち面倒になりますし、プログラマというのは不要な仕事はやりたがらないものです。

毎回、挨拶をする相手の名前に合わせて具体的な関数を記述する代わりに、もっと強力で繰り返しの少ない方法があります。名前を入れる必要があることはわかっているけれども、どのような名前が入るかまだわからない、という場合に対応する一般的な関数を1つ記述します。
 
 そのためには、別の方法で宣言を行います。型アノテーションを使って変数や定数を宣言した時と同じフォーマットで、括弧の中にnameと型アノテーションを追加します。
 */
func hello(name: String) {
    print("Hello " + name)
}
/*:
 関数の本文の中の`name`は、上の`helloJohnny()`の定数と同じように扱われます。
 
 これで、`hello`関数は、型が`String`の`name`という「パラメータ」を持つことになります。
 
 後は、この関数を使う人が、`name`パラメータの値を何にするか関数に指示をすればよいのです。これを「値を渡す」と言います。関数に渡す値のことを「引数」と言います。
*/
hello(name: "Maria")
hello(name: "Vikram")

//: - experiment:(実験):
//:何度か関数を呼び出し、異なる引数を渡します。この関数は`name`と呼ばれる`String`型のパラメータを持つことが、オートコンプリート機能によって表示されます。




//: 次は、引数を取る関数を作る練習をしましょう。
//:
//: [前ヘ](@previous)  |  2／17ページ  |  [次は「好きな食べ物」です。](@next)
