/*:
 ## 構成要素
 
 最初に関数を学んだときは、タスクをまとめる方法として学びました。それぞれの関数は、より大きなプログラムの構成要素でした。
 
 これまでに、関数は次のようなことができると学習しました。
 
 - 情報を取り入れる
 - 処理を実行する
 - 情報を返す
 
 このような構成要素は、非常にパワフルです。
 
 この関数は、リストを作るために使用できます。
*/
func listByAdding(item: String, toList: String) -> String {
    return toList + "\n" + item
}
var list = "Milk"
list = listByAdding(item:"Eggs", toList: list)
list = listByAdding(item:"Bread", toList: list)
//: 以前に複合代入を使ってリストを作成した方法と比べてみてください。
list += "\n" + "Rice"
//: 関数が読みやすいことに気付くでしょう。リストのアイテムを区切るために`"\n"`を使う必要はありません。「複雑な部分を見せない」ことは、コードで関数を使う主なメリットの1つです。
//:
//: 関数やパラメータにわかりやすい名前を付けることも、関数の処理を理解しやすくします。これについては次に学習します。 
//:
//: [前ヘ](@previous)  |  9／17ページ  |  [次は「名前を付ける」です。](@next)
