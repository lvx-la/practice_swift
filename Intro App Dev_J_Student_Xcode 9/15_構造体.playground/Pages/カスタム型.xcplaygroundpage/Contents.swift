/*:
 ## カスタム型
 
 使える型は、Swiftに搭載されているものだけではありません。既存の型を構成要素として使い、独自の型を定義できます。
 
 Swiftで新しい型を作成する1つの方法は、構造体（「structure」または「struct」）を定義することです。構造体は、ほかの型の値をまとめるシンプルな方法です。
 
 次のように`Song`構造体を宣言して曲を表すことができます。
*/
struct Song {
    let title: String
    let artist: String
    let duration: Int
}
/*: 
 これによって、`Song`という名前の新しい型が作成されます。 
 
 「インスタンス」のレッスンでプロパティについて学習しました。`Song`には、`title`、`artist`、`duration`の3つのプロパティがあり、それぞれが`let`と型アノテーションを使って宣言されます。`Song`は3つの定数をグループにまとめたもの、と考えることができます。
 
 >(注意):
あなたが新しく作成した構造体は型なので、ほかのすべての型（`String`や`Int`など）と同様に、名前を大文字で始める必要があります。また、プロパティ名は小文字で始める必要があります。これによって、コードを読む時に型と値を見分けやすくなります。
 
 新しい型を宣言したら、次のようにインスタンスを作成できます。
*/
let song = Song(title: "No, no, no", artist: "Fizz", duration: 150)
//: 「インスタンス」のレッスンで学習したように、すべての型は少なくとも1つのイニシャライザを持ちます。構造体を宣言すると自動的にイニシャライザが作成されます。このイニシャライザは構造体の各メンバープロパティに対するパラメータを持つので、「memberwise initializer」（メンバーワイズイニシャライザ）と呼ばれます。
//: - experiment:(実験):
//:新しい`Song`を作成してみてください。オートコンプリートのポップアップメニューに、メンバーワイズイニシャライザが含まれることに注意してください。





//: 次は、構造体のプロパティについてさらに学習します。
//:
//: [前ヘ](@previous)  |  2／9ページ  |  [次は「構造体のプロパティ」です。](@next)
