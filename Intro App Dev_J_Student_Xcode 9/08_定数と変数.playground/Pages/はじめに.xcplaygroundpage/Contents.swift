/*:
 ## 「名前を付ける」ふたたび
 
「名前を付ける」では、実生活でもプログラミングでも名前を付けることが重要であることを確認しました。
 
コードの中で定数を宣言することによって名前を定義し、値に関連付ける方法を学習しました。
 */
let city = "Paris"
/*:
 また、関数を宣言することによって名前を定義し、ステートメントのリストに関連付ける方法も学習しました。
 */
func printGreeting() {
    let greeting = "Hello"
    print(greeting)
}
/*:
パターンが見えてきたかもしれません。プログラミングの大部分は、ものを作り、それに名前を付け、それを使うよう命令して呼び出すことです。
 
 ここまで、名前に値を割り当てる必要がある時はいつも定数を使ってきました。でも、なぜそれらを定数と呼ぶのか、という大きな疑問が残っています。
 
 名前から予想されるように「定数」とは、時を経ても変わらず同じものと関連があります。
 
 定数に値を代入した時から、その値は常に同じとみなされます。その名前に関連付けられる値は一定のままです。
 
 Swiftには、名前と値を関連付ける2つ目の方法があります。それを「変数（Variables）」と呼びます。
 
 変数を使うと、プログラムを実行して時が経つにつれ、値をアップデートできます。名前に関連付けられる値は、時間と共に変わることができます。
 
 このPlaygroundでは、変数と定数の違い、変数を宣言する方法、さらに定数ではなく変数を使う場合を判断する方法について説明します。
 
 変数はどのように機能するのでしょうか。また、なぜ変数を使うことが重要なのでしょう。
 
 次のページでさらに見てみましょう。

 
 */
//: 1／13ページ  |  [次は「定数と変数」です。](@next)
