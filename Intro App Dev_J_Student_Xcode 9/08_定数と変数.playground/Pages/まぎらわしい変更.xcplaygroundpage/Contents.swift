/*:
 ## まぎらわしい変更
 
 あなたは、何かが変更になって混乱したという経験はないでしょうか。
 
 例えば、友達6人が午後8時に映画館で待ち合わせしたとします。
 
 あなたは、予定が変わったというメッセージを受け取りました。午後9時に別の映画館で会って別の映画を見ることになりました。
 
 しばらくして、また予定が変わったというメッセージを受け取りました。友達の家に集まって、そこで映画を見ることになりました。時間が午後6時に変わり、あなたはピザを注文しようと考えます。
 
 その後、別の友達の家で午後6時半に集まろうというメッセージが届きました。
 
 - experiment:(実験):
 こんなに変更されたら、全員が正しい時刻に正しい場所に集まれるでしょうか？\
\
計画を変更しなければ、間違えることも少ないのではないでしょうか？
 
 変更を行うと、必ずと言っていいほど前の情報に頼って間違えてしまう人がいます。
 
 プログラミングでも同じです。何かを定数にしておけば、値が決して変わらないと保証することになります。プログラムの別の部分で同期がとれなくなったり、古い値を使ったりということも起こりません。
 
 場合によっては、変数を使う必要があります。プログラムの実行中には、ものごとが変化します。プログラミングでは、変化しうるものを「可変」と呼びます。
 
 変化できないものは「不変」と呼ばれます。大まかに言うと、変える必要がないものに対しては、常に定数を使った方が混乱やエラーを減らせます。
 
 エラーの話が出たので、次に進んで定数や変数を使う場合によく見られるエラーについて学習しましょう。
 */
//: [前ヘ](@previous)  |  6／13ページ  |  [次は「定数を変更してみる」です。](@next)
