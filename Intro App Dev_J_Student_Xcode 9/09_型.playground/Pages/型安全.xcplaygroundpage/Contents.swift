/*:
 ## 型安全
 
 変数に間違った型の値を代入しようとするとエラーになることを確認しました。Swiftでは、間違った方法や予期しない方法で型を使うコードは記述できません。これを「型安全」であると言い、あらゆるエラーを防いでくれます。
 
 異なる型の値を追加しようとすると、型安全のインスタンスが発生します。

- experiment:(実験):
 下の各コード行をコメント解除し、生成されるエラーを確認してください。Playgroundはエラーを見つけるとそこで止まってしまうので、1行ずつコメント解除する必要があります。
*/
//"banana" + 1
//2 + "2"
/*:
 次のようなエラーが表示されます。
 
 `Binary operator '+' cannot be applied to operands of type 'String' and 'Int'`（String型とInt型のオペランドに2項演算子「+」を使うことはできません）
 
 難しそうな文ですが、意味はとてもシンプルです。
 
 - `Binary operator '+'`：（すでに学習した）加算演算子`+`を、2項演算子と呼びます。2項演算子は、その左右に何かが入ります。
 - `cannot be applied to operands`：Operands（オペランド）とは、「banana」という文字列や「2」という整数のように、演算子が扱う対象となるものです。
 - `of type 'String' and 'Int'（String型とInt型の）：`+`の左右にあるものが`String`と`Int`です。`+`は、これらをどうやって足せばよいかわかりません。あなたはわかりますか？
 
 - callout(演習): 
 間違った加算のステートメントをもう少し記述してみます。各行を記述する前に、どのようなエラーが生成されるか予想してください。最初に、先ほど実験に使ったコードをコメント化してください。
 */








//: 次は、値を作成する時にSwiftはどうやってユーザーの意味する型を判断しているかを学習します。
//:
//: [前ヘ](@previous)  |  5／13ページ  |  [次は「型とリテラル」です。](@next)
