/*:
 ## 標準ライブラリだけではない
 
 プログラマは、標準ライブラリの型や機能を組み合わせたり追加したりして、独自の型を作ることもできます。このコースを進めて、皆さんも独自の型を作りましょう。
 
 - callout(実験):
前のページの実験で使った架空の型を1つ取り上げ、それがどの型に依存するか考えてみます。例えば、`TrainingShoe`はサイズに`Int`を使い、ブランド名に`String`を使い、発売日に`Date`を使い、ドルによる価格に`Int`を使う、といった具合です。


 型と機能は「フレームワーク」や「ライブラリ」と呼ばれるコレクションにまとめることができます。アプリケーションを作る時、Xcodeに含まれているフレームワークを利用することができます。特に重要なフレームワークの1つに「Foundation」フレームワークがあります。
 
 Foundationフレームワークは、Swift標準ライブラリにある文字列や数よりも、もっと具体的なものを表すために使用される多くの型を導入します。例えば、日付、距離、コンピュータ上のファイルの型があります。
 
 このような余分なフレームワークは、不要な場合もあるので、プログラムに自動的には追加されません。ちょっとショッピングモールに出かけるのに、あれこれ持っていく必要がないのと同じです。
 
 プログラムにフレームワークを追加する方法を次のページで学習します。 
 
[前ヘ](@previous)  |  10／13ページ  |  [次は「フレームワークのインポート」です。](@next)
*/
