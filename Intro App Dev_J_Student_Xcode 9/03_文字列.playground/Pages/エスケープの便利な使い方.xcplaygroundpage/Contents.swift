//: ## エスケープの便利な使い方
//: 文字を引用符で囲むことによって、多くの文字列を定義しました。では、引用符を含む文字列を定義する場合はどうなるでしょうか。
//:
//: 引用符を文字列の中ほどに追加してみましょう。
//:
//: 以下のコードの`badString`の行のコメントを解除すると何が起きるでしょうか。
//let badString = "He said, "Hi there!" as he passed by."
//: Swiftは2番目の引用符（`Hi`の直前）で文字列定義が終了したと判断するため、エラーが発生します。Swiftではコードのこの行の残りの部分をどのように解釈したらよいか判断できません。
//:
//: 一度確認したら、もう一度コードをコメント化しておきます。エラーは起こらなくなります。
//: ### 解決策
//: 文字列に引用符を含めるには、引用符の前にバックスラッシュを入力します。
let stringWithQuotationMarks = "He said, \"Hi there!\" as he passed by."
//: バックスラッシュは次に続く文字を特殊文字として扱うようにSwiftに知らせます。引用符をバックスラッシュに続けて入力すると、Swiftは引用符を異なる方法で処理します。文字列の定義を終了せずに、引用符を文字列の一部として組み込みます。
//:
//:バックスラッシュは文字列の通常の動作を「逃れる（エスケープする）」手段となるため、「エスケープ文字」と呼ばれます。
//:
//: ほかにどのような場合にエスケープ文字を使うことができるか、さらに考えてみましょう。
//:
//:[前ヘ](@previous)  |  10／16ページ  |  [次は「エスケープシーケンス」です。](@next)
