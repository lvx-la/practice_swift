/*:
 ## else
 
 ビデオに対するメッセージを表示するコードには、2つの似たような文が含まれています。これは、前のページの実験からわかるように、時間がかかり、まぎらわしくて間違えやすいアプローチです。
*/
let videoLength = 5

if videoLength >= 5 {
    "That's lovely."
}

if videoLength < 5 {
    "If I blinked, I'd miss it."
}
//: 「値が5より小さかったらこの処理をする。そうでない場合はほかの処理をする」と言えるといいですね。それには`else`というキーワードを使います。
if videoLength < 5 {
    "If I blinked, I'd miss it."
} else {
    "That's lovely."
}
/*:
 これを「if-else文」と呼びます。次のように機能します。
 - `if（もしも）`
 - `true`か`false`のどちらかになるコードが`true`なら、
 - 中括弧内のコード`{...}`を実行する。
 - `else（そうでない場合は）`
 - 2つ目の中括弧内のコードを実行する。

 - experiment:(実験):
 もう一度`videoLength`の値を変更してみます。if文を複数使った場合と、if-else文を使った場合とで、同じ結果が表示されることを確認してください。

- experiment:(実験):
 `videoLength`と比較する値を変更します。すべての`5`の値を、別の値に変更します。上の`if`文の両方のメッセージが同時に表示されるようにしてみます。

 `videoLength`の値をいくつにしても、また比較対象の数をいくつに設定しても、if-else文では1つのメッセージしか表示されません。

 次は、複数の条件式を使って判断する方法を説明します。
 
[前ヘ](@previous)  |  6／13ページ  |  [次は「Else if」です。](@next)
*/
