/*:
 ## 配列の処理
 
 似たような値をグループ化してコレクションにまとめるのは、通常、各アイテムに対して何らかの処理を行いたい場合です。
 
 以下のような配列があります。
*/
let friends = ["Name", "Name2", "Name3", "Name4", "Name5"]
//: ここで、配列内の各アイテムを処理する関数を定義します。
func invite(friend: String) {
    print("Hey, \(friend), please come to my party on Friday!")
}
//: それから、関数を何度も何度も呼び出します。コンソールで出力を確認してください。
invite(friend: friends[0])
invite(friend: friends[1])
invite(friend: friends[2])
//...
//: このコードは機能しますが、いくつかの問題が残ります。配列内にいくつアイテムがあるかわかっていないと、関数の呼び出しをいつやめればよいかわかりません。また、関数の呼び出しを何度も繰り返し記述する必要があります。招待客が増えると、`invite`関数をもっと入力しなければなりません。ユーザーに代わって自動的に処理してくれるのがコードでしたよね？また、番号の入力を間違えて1人とばしてしまったらどうしましょう？間違いに気づけるでしょうか？
//:
//: 幸い、Swiftにはこの処理を安全かつ迅速に行う方法があります。\
//: [前ヘ](@previous)  |  6／17ページ  |  [次は「ループ」です。](@next)
