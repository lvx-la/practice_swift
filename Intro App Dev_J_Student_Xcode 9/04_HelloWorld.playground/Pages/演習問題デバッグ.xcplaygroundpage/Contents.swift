/*:
 ## 演習問題：デバッグ
 
 プログラムがうまく機能しない理由を見つけるため、一時的に`print`文を追加することがあります。
 
 コードの問題、つまり「バグ」を見つけ出すことは、コンソールの最も一般的な使い方の一つです。プログラマは、うまく機能しないコードの対応にかなりの時間を費やしているのが現状です。思いどおりに動いたとしたら、それを修正しようとはしないでしょう。

 この演習では、ほかの人が記述したコードをデバッグします。がんばってください。
 
 - note:(注意):
コンソールを表示し、結果バーは非表示にしてください。結果サイドバーを使ってデバッグを行う機会は、このコースの中にたくさんあります。

 
  - callout(実験：疑似パーソナライズ):
 あなたの友達が皆で、あなたを驚かせるようなことをしました。そこで、あなたの気持ちを表現するよう各友達向けにパーソナライズしたメッセージを、全員に送ることにします。一人ひとりにメッセージを書いている時間がないので、メッセージを生成するプログラムを作りました。うまくいけば、`name`変数を変えてコピー＆ペーストするだけで、友達一人ひとりに疑似パーソナライズされた驚きの反応を送ることができます。*/
// -------------- 👇 この線の下のコードを修正してください。 👇 --------------------


let questionWord = "WHY"
let connectorWord = "but"
let question = "\(connectorWord) \\(questionWord)?"

let incessantQuestion = "\(question)\(question)\(question)\(question)"

let name = "Kim"
let summons = "\(name) \(name). \(name)!"

let botheration = "\(summons)\(incessantQuestion)"


// -------------- 👆 この線の上のコードを修正してください。 👆 --------------------
//: 残念ながら、このプログラムにはバグがあります。指示に従ってエラーを見つけ、修正してください。
// -------------- 👇 この線の下にprint文を追加してください。 👇 --------------------




/*:

 1. 以下のように`botheration`定数を出力します。
 ```
 (例):  print(botheration)
 ```

 まだ、通常のテキストメッセージのような結果は表示されません。記号の使い方がおかしいところや、コードが正しくないところが残っています。コードを細かく調べて、正しい結果が得られるまであちこち変更することもできますが、中間定数を使って調べると簡単です。
 

 2. `print`文をいくつか追加し、`question`などの中間定数をチェックします。
 3. エラーの原因になっている行がわかったら、最初から最後までその行を修正してください。（復習が必要な場合は「文字列」のPlaygroundに戻ってください）コンソールのチェックを続け、中間定数が正しいことを確認します。不要になった`print`文は、いつでも削除またはコメント化できます。

 4. 最後の文字列が、コンピュータではなく人間が送ったように見えるようになったら、定数を使ってオリジナルのメッセージを作ってみてください。
	* 文字列定数`questionWord`、`connectorWord`、および`name`を別の値に変更します。
	* `question`、`incessantQuestion`、および`summons`の定数の組み合わせを変えてみます。繰り返す回数を増やしたり、減らしたり、新しいフレーズを混ぜることもできます。
 
[前ヘ](@previous)  |  10／11ページ  |  [次は「演習問題：コンソールアプリケーション」です。](@next)
 */
