//: ## 名前を付ける
//: プログラミングにおいて、名前は多くのことを説明でき、非常に便利なものです。実生活において何かに名前を付けるのと同じように、どれが何であるかを把握するのに役立ちます。コードで値に名前を付けると、その値を使うあらゆる場所でその名前を使うことができます。これによってコードが読みやすく、理解しやすくなります。
//:
//: また、コード内のエラーを防ぐためにも役立ちます。例えば、ペットショーの実験では、1つアップデートするためにコードの複数の行で数を変更する必要があるため、ミスしやすい状況でした。各値（「カメの数」など）に名前を付けると、1か所名前の定義を変更するだけで、コード内でその名前が現れるすべての場所で、アップデートされた定義が使用されることになります。
//:
//: Swiftでは、「定数（Constants）」を定義することによって、名前を選択して1つの値に関連付けることができます。定数については、コースの後の部分で詳しく説明します。ここでは、定数はSwiftで値に名前を付ける基本的な方法だと覚えておけば十分です。
//:
//: `let`という語の後に定数を定義する名前と等号`=`を続けると、定数に値を指定できます。
let numberOfDogs = 6 + 2

let numberOfCats = 5 - 1

let numberOfTurtles = 2 + 1

let numberOfHamsters = 1 + 1

//: 定数を定義して値を代入すると、その値を使うあらゆる場所で定数を使用できます。次のように、新しい定数の値を定義する数学的な計算式の中でも定数を使用できます。

let totalNumberOfAnimals = numberOfDogs + numberOfCats + numberOfTurtles + numberOfHamsters

let totalNumberOfMammals = numberOfDogs + numberOfCats + numberOfHamsters

//: これで、ある種類の動物の数をアップデートするのがとても簡単になり、ミスも起きにくくなりました。定数を定義する部分だけ、値を変更すればよいのです。
//:
//: Playgroundでは、等号の右側で足し算や引き算をすることもできます。例えば、犬を連れた人がさらにもう2人来る場合、6を8に変更する代わりに、次のように入力できます。
//:
//: `let numberOfDogs = 6 + 2`
//: - experiment:
//:(実験):
//:後日、来場者のペットについてさらに情報が入りました。\
//:以下の変更内容に応じて、上のコードをアップデートしてください。
//: - さらにもう2人が犬を1匹ずつ連れてくる。
//: - 病気だったカメの具合がよくなり、ペットショーに来場することになった。
//: - 猫1匹の都合がつかない。
//: - さらにもう1人がハムスターを1匹連れてくる。
//:
//: 実験が終わったら、次に進んでください。
//:
//:[前ヘ](@previous)  |  4／14ページ  |  [次は「名前の入力とオートコンプリート機能」です。](@next)
